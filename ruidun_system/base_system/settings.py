"""
Django settings for base_system project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import socket
import logging

import datetime
import django.utils.log
import logging.handlers
import time
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, BASE_DIR)



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '62$i8wu07@0=kc7)@9!w((r5o!g7p@1@ah-k2(y3t7sd1n#l=2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# 使用python manage.py runserver --insecure来启动项目可以解决关闭debug之后静态文件无法加载的问题。


ALLOWED_HOSTS = [
    '*'
]


# Application definition

INSTALLED_APPS = [
    # General use templates & template tags (should appear first)
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'autofixture',
    'django_extensions',
    'rest_framework_tracking',
    'rest_framework',
    'rest_framework_jwt',
    # 'rest_framework_json_api',
    'corsheaders',
    'django_filters',
    'auth_system',
    'staff',
    'bim',
    'bridge_and_tunnel',
    'equipment',
    'help',
    'internet_operate',
    'internet_setting',
    'safe',
    'search',
    'system_manage',
    'work_area',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'lib.user_permission.user_permission_middleware'
    # 'lib.log_middleware.LogMiddleware'
]

ROOT_URLCONF = 'base_system.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'base_system.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'ruidun',
        'HOST': '127.0.0.1',
        # 'HOST': '47.92.26.15',
        'USER': 'root',
        'PASSWORD': 'mysql',
        'PORT': '3306',
        # 'OPTIONS': {
        #     'sql_mode': 'traditional',
        # }
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

# USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
# STATIC_URL = '/dist/'
# STATICFILES_DIRS = [os.path.join(BASE_DIR, 'dist')]
# TEXT_ROOT = os.path.join(BASE_DIR, 'static/text')

#文件上传路径
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'django.contrib.staticfiles.finders.FileSystemFinder',
]

# STATIC_ROOT = os.path.join(BASE_DIR, 'static')

REST_FRAMEWORK = {
    # 'PAGE_SIZE': 20,
    # 'DEFAULT_PERMISSION_CLASSES': (
    #     'rest_framework.permissions.IsAuthenticated',
    # ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
    'DEFAULT_PAGINATION_CLASS':  'base_system.pagination.StandardPageNumberPagination',
    'PAGE_SIZE': 20,  # 每页数目
    'DEFAULT_RENDERER_CLASSES': (  # 默认响应渲染类
        'rest_framework.renderers.JSONRenderer',  # json渲染器
        'rest_framework.renderers.BrowsableAPIRenderer',  # 浏览API渲染器
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ),
    'EXCEPTION_HANDLER': 'db.base_model.custom_exception_handler'


    # 'EXCEPTION_HANDLER': 'rest_framework_json_api.exceptions.exception_handler',
    # 'DEFAULT_PAGINATION_CLASS':
    #     'rest_framework_json_api.pagination.JsonApiPageNumberPagination',
    # 'DEFAULT_PARSER_CLASSES': (
    #     'rest_framework_json_api.parsers.JSONParser',
    #     'rest_framework.parsers.FormParser',
    #     'rest_framework.parsers.MultiPartParser'
    # ),
    # 'DEFAULT_RENDERER_CLASSES': (
    #     'rest_framework_json_api.renderers.JSONRenderer',
    #     'rest_framework.renderers.BrowsableAPIRenderer',
    # ),
    # 'DEFAULT_METADATA_CLASS': 'rest_framework_json_api.metadata.JSONAPIMetadata',
    # 'DEFAULT_FILTER_BACKENDS': (
    #     'rest_framework_json_api.filters.QueryParameterValidationFilter',
    #     'rest_framework_json_api.filters.OrderingFilter',
    #     'rest_framework_json_api.django_filters.DjangoFilterBackend',
    #     'rest_framework.filters.SearchFilter',
    # ),
    # 'SEARCH_PARAM': 'filter[search]',
    # 'TEST_REQUEST_RENDERER_CLASSES': (
    #     'rest_framework_json_api.renderers.JSONRenderer',
    # ),
    # 'TEST_REQUEST_DEFAULT_FORMAT': 'vnd.api+json'
}

# from login.views import jwt_response_payload_handler
# JWT_AUTH = {
#     'JWT_EXPIRATION_DELTA': datetime.timedelta(days=7),
#     'JWT_AUTH_HEADER_PREFIX': 'JWT',
#     'JWT_RESPONSE_PAYLOAD_HANDLER': jwt_response_payload_handler
# }
AUTH_USER_MODEL = 'auth_system.User'

def jwt_response_payload_handler(token, user=None, request=None):
    from auth_system import user_serializer
    return {
        'token': token,
        'user': user_serializer.UserSerializer(user, context={'request': request}).data
    }


JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=7),
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
    'JWT_RESPONSE_PAYLOAD_HANDLER': jwt_response_payload_handler
}

CORS_ORIGIN_ALLOW_ALL = True

# CORS 允许跨域访问
CORS_ORIGIN_WHITELIST = (
    '192.168.1.141:9528',
    '192.168.1.87:8000',
    '127.0.0.1:9528',
)
CORS_ALLOW_CREDENTIALS = True  # 允许携带cookie

